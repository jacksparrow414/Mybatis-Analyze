server:
  port: 8999
spring:
  application:
    name: mybatis-demo
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/dhb?serverTimezone=UTC
    username: root
    password: 12345
  shardingsphere:
    enabled: false
  # sharding-proxy配置
#    url: jdbc:mysql://localhost:13306/sharding_db?serverTimezone=UTC
#    username: sharding
#    password: 123456
#    driver-class-name: com.mysql.cj.jdbc.Driver

    # sharding-jdbc配置
#  shardingsphere:
#    datasource:
#      # 数据库的别名
#      names: master0
#
#      # 主库1
#      master0:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driverClassName: com.mysql.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/dhb?serverTimezone=UTC
#        password: 12345
#        username: root
#      # 主库1的从库1
#      ds0-slave0:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driverClassName: com.mysql.jdbc.Driver
#        url: jdbc:mysql://localhost:3307/dhb?serverTimezone=UTC
#        password: 12345
#        username: root
#      # 主库1的从库2
#      ds0-slave1:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driverClassName: com.mysql.jdbc.Driver
#        url: jdbc:mysql://localhost:3308/dhb?serverTimezone=UTC
#        password: 12345
#        username: root
#
      # 主库2
#      master1:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driverClassName: com.mysql.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/demo_ds_1?serverTimezone=UTC
#        password: 12345
#        username: root
#
    # 数据分片配置---start
#    sharding:
#      # 默认分库策略
#      default-database-strategy:
#        inline:
#          sharding-column: id
#          algorithm-expression: ds$->{id % 2}
#      # 默认分表策略
#      default-table-strategy:
#        inline:
#          sharding-column: age
#          algorithm-expression: user_$->{age % 2}
      # 数据节点
#      tables:
#        sns_resource_basic:
#          actual-data-nodes: ds-0-1073741823.sns_resource_basic,ds-1073741824-2147483647.sns_resource_basic
#          databaseStrategy:
#            standard:
#              shardingColumn: res_id
##              精度分片算法 配置
#              preciseAlgorithmClassName: com.example.mybatis.demomybatis.shardingsphere.algorithm.CustomPreciseShardingAlgorithm
#        sns_resource_essay:
#          actual-data-nodes: ds-0-1073741823.sns_resource_essay,ds-1073741824-2147483647.sns_resource_essay
#          databaseStrategy:
#            standard:
#              shardingColumn: res_id
#              preciseAlgorithmClassName: com.example.mybatis.demomybatis.shardingsphere.algorithm.CustomPreciseShardingAlgorithm
#        sns_resource_cache:
#          actual-data-nodes: ds-0-1073741823.sns_resource_cache,ds-1073741824-2147483647.sns_resource_cache
#          databaseStrategy:
#            standard:
#              shardingColumn: res_id
#              preciseAlgorithmClassName: com.example.mybatis.demomybatis.shardingsphere.algorithm.CustomPreciseShardingAlgorithm
      # 默认数据库
#      default-data-source-name: master0
    # 数据分片配置---end
#
#
#      # 读写分离配置---start
#      master-slave-rules:
#        ds0:
#          master-data-source-name: ds0
#          slave-data-source-names: ds0-slave0,ds0-slave1
#          #从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。
#          #若`load-balance-algorithm-class-name`存在则忽略该配置
#          load-balance-algorithm-type: ROUND_ROBIN
#          #从库负载均衡算法类名称。该类需实现MasterSlaveLoadBalanceAlgorithm接口且提供无参数构造器
#          #load-balance-algorithm-class-name=
#      # 读写分离配置---end
#
#
      # 数据脱敏规则配置---start
#      encrypt-rule:
#          encryptors:
##            encryptor_sha256:
#              # 加密、解密器的名字，内置的为MD5，aes.
#              # 可以自定义，实现
#              # com.example.mybatis.demomybatis.shardingsphere.encrypt
#              # 或者
#              # org.apache.shardingsphere.encrypt.strategy.spi.QueryAssistedEncryptor
#              # 这两个接口即可
##              type: SHA256
#
#            encryptor_MD5:
#              type: md5
#
#            encryptor_sha256random:
#              type: SHA256_RANDOM
#
#
#          tables:
#            # 数据库，对应上面分片的tables
#             user:
#              columns:
#                # 逻辑列,就是写SQL里面的列，因为实体类的名字和数据库的加密列一致，所以这里都是name
#                name:
#                  # 密文列，用来存储密文数据
#                  cipherColumn: name
#                  # 加密器名字
#                  encryptor: encryptor_sha256random
#                  # 辅助查询列
#                  assistedQueryColumn: same_data
#                other_info:
#                  cipherColumn: info
#                  encryptor: encryptor_MD5
      # 数据脱敏规则配置---end




  #      broadcast-tables:
#    props:
#      # 打印SQL
#      sql.show: true
#      check:
#        table:
#          metadata: true
#          # 是否在启动时检查分表元数据一致性
#          enabled: true
#      query:
#         with:
#           cipher:
#             column: true




#  aop:
#    proxy-target-class: false
    # 因为Druid数据源和默认的数据源冲突，添加此配置
#  main:
#    allow-bean-definition-overriding: true

##以下配置是学习solr时的配置
##  data:
##    solr:
##      host: http://localhost:8983/solr
#
#以下配置是学习Mybatis时的配置
mybatis:
#  config-location: classpath:mybatis-spring-config.xml
  mapper-locations: classpath:mapper/UserMapper.xml